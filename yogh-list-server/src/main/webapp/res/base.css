:root {
  --punch-color: var(--color-5);
  --theme-color: black;
  --theme-color-light: white;
  
  --color-1: #4878D9; /* blue */
  --color-2: #304D73; /* blue 2 */
  --color-3: #F2A81D; /* yellow */
  --color-4: #F2921D; /* orange */
  --color-5: #F24C27; /* red / punch */

  --text-color: #333;
  --back-color: #F5F5F5;

  --grey: #888;

  --spacer: 0.7rem;
  --half-spacer: 0.5rem;
  
  --paragraph: clamp(45ch, 100%, 75ch);

  --animation-time: 0.15s;
  --anim: 0.1s ease-out;
}

::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */
  color: var(--grey);
  opacity: 1; /* Firefox */
}

*:focus {
  z-index: 1;
  outline: 2px dotted var(--theme-color);
  border-radius: var(--default-radius);
  border-color: transparent;
  outline-offset: 2px;
}

*[tabindex="-1"]:focus {
  /* Don't show outline when tabindex is an explicit -1 (i.e. the element is focusable, but not through keyboard interaction)
   *
   * Note: An element with tabindex=-1 can be given focus programmatically through `.focus()`, this is useful to set the focus point within the DOM, and
   * thus helps the user's intuition with where the focus starts, but without also showing visual clues to this effect. For example when a popup opens up,
   * the popup container can be given tabindex=-1 and .focus()-ed, then when the user tabs through, he will give focus to the first element in the popup,
   * rather than some element in the background, thereby doing what his intuition would expect.
   *
   * Also note: tabindex should never be >1
   */
  outline: 0 !important;
}

html {
  height: 100%;
  min-height: 600px;
  font-family: 'Roboto', sans-serif;
  font-optical-sizing: auto;
}

body {
  height: 100%;
  min-width: 800px;
  margin: 0px;
  padding: 0px;
  color: var(--text-color);
}
p {
  margin: 0px;
  line-height: 1.7em;
}
h1,h2 {
  margin: 8px 0px;
  font-size: 22px;
  font-weight: normal;
  color: var(--text-color);
}
h3,h4,h5 {
  margin: 0px;
  font-size: 1em;
}

em {
  color: var(--theme-color);
  font-weight: bold;
  font-style: normal;
}
a {
  color: var(--hyperlink-color);
}

a:visited {
  color: var(--hyperlink-color-visited);
}
